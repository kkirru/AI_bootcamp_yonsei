{"ast":null,"code":"'use strict';\n\nconst isIp = require('is-ip');\n\nconst defaults = {\n  timeout: 5000\n};\nconst urls = {\n  v4: ['https://ipv4.icanhazip.com/', 'https://api.ipify.org/'],\n  v6: ['https://ipv6.icanhazip.com/', 'https://api6.ipify.org/']\n};\nlet xhr;\n\nconst sendXhr = async (url, options, version) => {\n  return new Promise((resolve, reject) => {\n    xhr = new XMLHttpRequest();\n    xhr.addEventListener('error', reject, {\n      once: true\n    });\n    xhr.addEventListener('timeout', reject, {\n      once: true\n    });\n    xhr.addEventListener('load', () => {\n      const ip = xhr.responseText.trim();\n\n      if (!ip || !isIp[version](ip)) {\n        reject();\n        return;\n      }\n\n      resolve(ip);\n    }, {\n      once: true\n    });\n    xhr.open('GET', url);\n    xhr.timeout = options.timeout;\n    xhr.send();\n  });\n};\n\nconst queryHttps = async (version, options) => {\n  let ip;\n  const urls_ = [].concat.apply(urls[version], options.fallbackUrls || []);\n\n  for (const url of urls_) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      ip = await sendXhr(url, options, version);\n      return ip;\n    } catch (_) {}\n  }\n\n  throw new Error('Couldn\\'t find your IP');\n};\n\nqueryHttps.cancel = () => {\n  xhr.abort();\n};\n\nmodule.exports.v4 = options => queryHttps('v4', { ...defaults,\n  ...options\n});\n\nmodule.exports.v6 = options => queryHttps('v6', { ...defaults,\n  ...options\n});","map":{"version":3,"sources":["/Users/kkirru/AIbootcamp/app-service/node_modules/public-ip/browser.js"],"names":["isIp","require","defaults","timeout","urls","v4","v6","xhr","sendXhr","url","options","version","Promise","resolve","reject","XMLHttpRequest","addEventListener","once","ip","responseText","trim","open","send","queryHttps","urls_","concat","apply","fallbackUrls","_","Error","cancel","abort","module","exports"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,OAAO,EAAE;AADO,CAAjB;AAIA,MAAMC,IAAI,GAAG;AACZC,EAAAA,EAAE,EAAE,CACH,6BADG,EAEH,wBAFG,CADQ;AAKZC,EAAAA,EAAE,EAAE,CACH,6BADG,EAEH,yBAFG;AALQ,CAAb;AAWA,IAAIC,GAAJ;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,OAAZ,EAAqBC,OAArB,KAAiC;AAChD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCP,IAAAA,GAAG,GAAG,IAAIQ,cAAJ,EAAN;AACAR,IAAAA,GAAG,CAACS,gBAAJ,CAAqB,OAArB,EAA8BF,MAA9B,EAAsC;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAtC;AACAV,IAAAA,GAAG,CAACS,gBAAJ,CAAqB,SAArB,EAAgCF,MAAhC,EAAwC;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAxC;AAEAV,IAAAA,GAAG,CAACS,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;AAClC,YAAME,EAAE,GAAGX,GAAG,CAACY,YAAJ,CAAiBC,IAAjB,EAAX;;AAEA,UAAI,CAACF,EAAD,IAAO,CAAClB,IAAI,CAACW,OAAD,CAAJ,CAAcO,EAAd,CAAZ,EAA+B;AAC9BJ,QAAAA,MAAM;AACN;AACA;;AAEDD,MAAAA,OAAO,CAACK,EAAD,CAAP;AACA,KATD,EASG;AAACD,MAAAA,IAAI,EAAE;AAAP,KATH;AAWAV,IAAAA,GAAG,CAACc,IAAJ,CAAS,KAAT,EAAgBZ,GAAhB;AACAF,IAAAA,GAAG,CAACJ,OAAJ,GAAcO,OAAO,CAACP,OAAtB;AACAI,IAAAA,GAAG,CAACe,IAAJ;AACA,GAnBM,CAAP;AAoBA,CArBD;;AAuBA,MAAMC,UAAU,GAAG,OAAOZ,OAAP,EAAgBD,OAAhB,KAA4B;AAC9C,MAAIQ,EAAJ;AACA,QAAMM,KAAK,GAAG,GAAGC,MAAH,CAAUC,KAAV,CAAgBtB,IAAI,CAACO,OAAD,CAApB,EAA+BD,OAAO,CAACiB,YAAR,IAAwB,EAAvD,CAAd;;AACA,OAAK,MAAMlB,GAAX,IAAkBe,KAAlB,EAAyB;AACxB,QAAI;AACH;AACAN,MAAAA,EAAE,GAAG,MAAMV,OAAO,CAACC,GAAD,EAAMC,OAAN,EAAeC,OAAf,CAAlB;AACA,aAAOO,EAAP;AACA,KAJD,CAIE,OAAOU,CAAP,EAAU,CAAE;AACd;;AAED,QAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACA,CAZD;;AAcAN,UAAU,CAACO,MAAX,GAAoB,MAAM;AACzBvB,EAAAA,GAAG,CAACwB,KAAJ;AACA,CAFD;;AAIAC,MAAM,CAACC,OAAP,CAAe5B,EAAf,GAAoBK,OAAO,IAAIa,UAAU,CAAC,IAAD,EAAO,EAAC,GAAGrB,QAAJ;AAAc,KAAGQ;AAAjB,CAAP,CAAzC;;AAEAsB,MAAM,CAACC,OAAP,CAAe3B,EAAf,GAAoBI,OAAO,IAAIa,UAAU,CAAC,IAAD,EAAO,EAAC,GAAGrB,QAAJ;AAAc,KAAGQ;AAAjB,CAAP,CAAzC","sourcesContent":["'use strict';\nconst isIp = require('is-ip');\n\nconst defaults = {\n\ttimeout: 5000\n};\n\nconst urls = {\n\tv4: [\n\t\t'https://ipv4.icanhazip.com/',\n\t\t'https://api.ipify.org/'\n\t],\n\tv6: [\n\t\t'https://ipv6.icanhazip.com/',\n\t\t'https://api6.ipify.org/'\n\t]\n};\n\nlet xhr;\n\nconst sendXhr = async (url, options, version) => {\n\treturn new Promise((resolve, reject) => {\n\t\txhr = new XMLHttpRequest();\n\t\txhr.addEventListener('error', reject, {once: true});\n\t\txhr.addEventListener('timeout', reject, {once: true});\n\n\t\txhr.addEventListener('load', () => {\n\t\t\tconst ip = xhr.responseText.trim();\n\n\t\t\tif (!ip || !isIp[version](ip)) {\n\t\t\t\treject();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve(ip);\n\t\t}, {once: true});\n\n\t\txhr.open('GET', url);\n\t\txhr.timeout = options.timeout;\n\t\txhr.send();\n\t});\n};\n\nconst queryHttps = async (version, options) => {\n\tlet ip;\n\tconst urls_ = [].concat.apply(urls[version], options.fallbackUrls || []);\n\tfor (const url of urls_) {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tip = await sendXhr(url, options, version);\n\t\t\treturn ip;\n\t\t} catch (_) {}\n\t}\n\n\tthrow new Error('Couldn\\'t find your IP');\n};\n\nqueryHttps.cancel = () => {\n\txhr.abort();\n};\n\nmodule.exports.v4 = options => queryHttps('v4', {...defaults, ...options});\n\nmodule.exports.v6 = options => queryHttps('v6', {...defaults, ...options});\n"]},"metadata":{},"sourceType":"script"}